generator client {
  provider        = "prisma-client-js"
  //postgres
  // previewFeatures = ["fullTextSearch"]
  // mysql
  previewFeatures = ["fullTextSearch", "fullTextIndex"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          Int      @id @default(autoincrement())
  email       String?  @unique
  password    String?
  auth        String? //authenticate with google or jwt
  firstName   String?
  lastName    String?
  phoneNumber String?
  birthDate   String?
  status      Boolean  @default(false)
  role        String
  orders      Order[]
  reviews     Review[]
}

model Role {
  id       Int    @id @default(autoincrement())
  roleName String
}

model Product {
  id          Int       @id @default(autoincrement())
  name        String
  short_descr String?
  description String?
  producer    String?
  price       Decimal
  charact     String?
  in_stock    Int
  img_path    String?
  categoryId  Int?
  category    Category? @relation(fields: [categoryId], references: [id])
  reviews     Review[]
  buckets     Bucket[]
  raiting     Float
  sliders     Slider[]
  // @@fulltext([name, short_descr, description, html_descr])
}

model Service {
  id          Int      @id @default(autoincrement())
  name        String
  short_descr String?
  description String?
  price       Decimal
  img_path    String?
  categoryId  Int?
  reviews     Review[]
  raiting     Float
  // category    Category? @relation(fields: [categoryId], references: [id])
  // sliders     Slider[]
  // buckets     Bucket[]
  // @@fulltext([name, short_descr, description, html_descr])
}

model Category {
  id           Int       @id @default(autoincrement())
  categoryName String
  img_path     String?
  block_type   String?
  main_page    Boolean?  @default(false)
  // c_items      Int       @default(0)
  products     Product[]
  // services     Service[]
}

model Order {
  id        Int       @id @default(autoincrement())
  userId    Int?
  user      User?     @relation(fields: [userId], references: [id])
  totalCost Float?
  status    String    @default("registered")
  date      DateTime? @default(now())
  buckets   Bucket[]
}

model Bucket {
  id       Int      @id @default(autoincrement())
  orderId  Int
  order    Order?   @relation(fields: [orderId], references: [id])
  prodId   Int?
  product  Product? @relation(fields: [prodId], references: [id])
  quantity Int?
}

model Review {
  id           Int      @id @default(autoincrement())
  body         String
  prodId       Int?
  product      Product? @relation(fields: [prodId], references: [id])
  serviceId    Int?
  service      Service? @relation(fields: [serviceId], references: [id])
  userId       Int
  user         User     @relation(fields: [userId], references: [id])
  createdDate  String
  raiting      Int
  authorName   String
  productName String
  text         String
}

model Currency {
  id   Int       @id @default(autoincrement())
  rate Float
  date DateTime? @default(now())
}

model Slider {
  id          Int      @id @default(autoincrement())
  prodId      Int?
  product     Product? @relation(fields: [prodId], references: [id])
  title       String?
  description String?
  img_path    String?
}
